version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: waste-management-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: waste-management
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - waste-management-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: waste-management-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - waste-management-network

  # Backend API Server
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: waste-management-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/waste-management?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CLIENT_URL: http://localhost:3000
      UPLOAD_DIR: /app/uploads
      MAX_FILE_SIZE: 10485760
      RATE_LIMIT_WINDOW: 900000
      RATE_LIMIT_MAX: 100
    ports:
      - "5000:5000"
    volumes:
      - api_uploads:/app/uploads
      - ./server/logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - waste-management-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Application
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost:5000/api
        REACT_APP_MAPBOX_TOKEN: your-mapbox-token-here
    container_name: waste-management-client
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - waste-management-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: waste-management-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - client
      - api
    networks:
      - waste-management-network
    profiles:
      - production

  # ML Service (Optional - for advanced image processing)
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: waste-management-ml
    restart: unless-stopped
    environment:
      FLASK_ENV: production
      MODEL_PATH: /app/models
      REDIS_URL: redis://redis:6379
    ports:
      - "5001:5000"
    volumes:
      - ml_models:/app/models
      - ml_cache:/app/cache
    depends_on:
      - redis
    networks:
      - waste-management-network
    profiles:
      - ml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: waste-management-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - waste-management-network
    profiles:
      - monitoring

  # Grafana for visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: waste-management-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - waste-management-network
    profiles:
      - monitoring

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  api_uploads:
    driver: local
  nginx_logs:
    driver: local
  ml_models:
    driver: local
  ml_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  waste-management-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16