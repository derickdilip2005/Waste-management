{"ast":null,"code":"var _jsxFileName = \"E:\\\\Derick\\\\Projects\\\\waste-management\\\\client\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: null,\n  token: null,\n  loading: true\n};\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        loading: false\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: state.user ? {\n          ...state.user,\n          ...action.payload\n        } : null\n      };\n    default:\n      return state;\n  }\n};\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n  useEffect(() => {\n    // Check for existing token on app load\n    const initializeAuth = async () => {\n      const token = localStorage.getItem('token');\n      const userData = localStorage.getItem('user');\n      if (token && userData) {\n        try {\n          const user = JSON.parse(userData);\n          dispatch({\n            type: 'LOGIN_SUCCESS',\n            payload: {\n              user,\n              token\n            }\n          });\n\n          // Verify token is still valid\n          const response = await authAPI.getProfile();\n          if (response.success && response.data) {\n            dispatch({\n              type: 'UPDATE_USER',\n              payload: response.data\n            });\n          }\n        } catch (error) {\n          // Token is invalid, clear storage\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          dispatch({\n            type: 'LOGOUT'\n          });\n        }\n      } else {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n      }\n    };\n    initializeAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const response = await authAPI.login(email, password);\n      if (response.success && response.data) {\n        const {\n          token,\n          user\n        } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user,\n            token\n          }\n        });\n      } else {\n        throw new Error(response.error || 'Login failed');\n      }\n    } catch (error) {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      throw error;\n    }\n  };\n  const register = async userData => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    try {\n      const response = await authAPI.register(userData);\n      if (response.success && response.data) {\n        const {\n          user,\n          token\n        } = response.data;\n\n        // Store in localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user,\n            token\n          }\n        });\n      } else {\n        throw new Error(response.error || 'Registration failed');\n      }\n    } catch (error) {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      await authAPI.logout();\n    } catch (error) {\n      // Continue with logout even if API call fails\n      console.error('Logout API call failed:', error);\n    }\n\n    // Clear localStorage\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    dispatch({\n      type: 'LOGOUT'\n    });\n  };\n  const updateUser = userData => {\n    dispatch({\n      type: 'UPDATE_USER',\n      payload: userData\n    });\n\n    // Update localStorage\n    if (state.user) {\n      const updatedUser = {\n        ...state.user,\n        ...userData\n      };\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n    }\n  };\n  const value = {\n    user: state.user,\n    token: state.token,\n    login,\n    register,\n    logout,\n    loading: state.loading,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authAPI","jsxDEV","_jsxDEV","initialState","user","token","loading","authReducer","state","action","type","payload","AuthContext","undefined","AuthProvider","children","_s","dispatch","initializeAuth","localStorage","getItem","userData","JSON","parse","response","getProfile","success","data","error","removeItem","login","email","password","setLoading","setItem","stringify","Error","register","logout","console","updateUser","updatedUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["E:/Derick/Projects/waste-management/client/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\nimport { User, AuthContextType, RegisterData } from '../types';\nimport { authAPI } from '../utils/api';\n\ninterface AuthState {\n  user: User | null;\n  token: string | null;\n  loading: boolean;\n}\n\ntype AuthAction =\n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'LOGIN_SUCCESS'; payload: { user: User; token: string } }\n  | { type: 'LOGOUT' }\n  | { type: 'UPDATE_USER'; payload: Partial<User> };\n\nconst initialState: AuthState = {\n  user: null,\n  token: null,\n  loading: true,\n};\n\nconst authReducer = (state: AuthState, action: AuthAction): AuthState => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, loading: action.payload };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        loading: false,\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: state.user ? { ...state.user, ...action.payload } : null,\n      };\n    default:\n      return state;\n  }\n};\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  useEffect(() => {\n    // Check for existing token on app load\n    const initializeAuth = async () => {\n      const token = localStorage.getItem('token');\n      const userData = localStorage.getItem('user');\n\n      if (token && userData) {\n        try {\n          const user = JSON.parse(userData);\n          dispatch({ type: 'LOGIN_SUCCESS', payload: { user, token } });\n          \n          // Verify token is still valid\n          const response = await authAPI.getProfile();\n          if (response.success && response.data) {\n            dispatch({ type: 'UPDATE_USER', payload: response.data });\n          }\n        } catch (error) {\n          // Token is invalid, clear storage\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          dispatch({ type: 'LOGOUT' });\n        }\n      } else {\n        dispatch({ type: 'SET_LOADING', payload: false });\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      const response = await authAPI.login(email, password);\n      \n      if (response.success && response.data) {\n        const { token, user } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        dispatch({ type: 'LOGIN_SUCCESS', payload: { user, token } });\n      } else {\n        throw new Error(response.error || 'Login failed');\n      }\n    } catch (error: any) {\n      dispatch({ type: 'SET_LOADING', payload: false });\n      throw error;\n    }\n  };\n\n  const register = async (userData: RegisterData): Promise<void> => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    \n    try {\n      const response = await authAPI.register(userData);\n      \n      if (response.success && response.data) {\n        const { user, token } = response.data as { user: User; token: string };\n        \n        // Store in localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        \n        dispatch({ type: 'LOGIN_SUCCESS', payload: { user, token } });\n      } else {\n        throw new Error(response.error || 'Registration failed');\n      }\n    } catch (error: any) {\n      dispatch({ type: 'SET_LOADING', payload: false });\n      throw error;\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      await authAPI.logout();\n    } catch (error) {\n      // Continue with logout even if API call fails\n      console.error('Logout API call failed:', error);\n    }\n    \n    // Clear localStorage\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    \n    dispatch({ type: 'LOGOUT' });\n  };\n\n  const updateUser = (userData: Partial<User>): void => {\n    dispatch({ type: 'UPDATE_USER', payload: userData });\n    \n    // Update localStorage\n    if (state.user) {\n      const updatedUser = { ...state.user, ...userData };\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n    }\n  };\n\n  const value: AuthContextType = {\n    user: state.user,\n    token: state.token,\n    login,\n    register,\n    logout,\n    loading: state.loading,\n    updateUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}