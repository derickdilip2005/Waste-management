{"ast":null,"code":"import { mockUsers, mockReports, mockRewards, mockNotifications, delay, generateId } from './mockData';\n\n// Mock storage to simulate database\nlet users = [...mockUsers];\nlet reports = [...mockReports];\nlet rewards = [...mockRewards];\nlet notifications = [...mockNotifications];\n\n// Mock Authentication API\nexport const mockAuthAPI = {\n  login: async (email, password) => {\n    await delay(800); // Simulate network delay\n\n    const user = users.find(u => u.email === email);\n    if (!user || password !== 'password123') {\n      return {\n        success: false,\n        error: 'Invalid credentials'\n      };\n    }\n    const token = `mock_token_${user._id}_${Date.now()}`;\n    return {\n      success: true,\n      message: 'Login successful',\n      data: {\n        token,\n        user\n      }\n    };\n  },\n  register: async userData => {\n    await delay(1000);\n    const existingUser = users.find(u => u.email === userData.email);\n    if (existingUser) {\n      return {\n        success: false,\n        error: 'User already exists with this email'\n      };\n    }\n    const newUser = {\n      _id: generateId(),\n      name: userData.name || '',\n      email: userData.email || '',\n      phone: userData.phone,\n      role: userData.role || 'citizen',\n      points: 0,\n      totalReports: 0,\n      completedReports: 0,\n      reportsSubmitted: 0,\n      status: 'active',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    users.push(newUser);\n    const token = `mock_token_${newUser._id}_${Date.now()}`;\n    return {\n      success: true,\n      message: 'Registration successful',\n      data: {\n        token,\n        user: newUser\n      }\n    };\n  },\n  getProfile: async () => {\n    await delay(500);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return {\n        success: false,\n        error: 'Not authenticated'\n      };\n    }\n    const userId = token.split('_')[2];\n    const user = users.find(u => u._id === userId);\n    if (!user) {\n      return {\n        success: false,\n        error: 'User not found'\n      };\n    }\n    return {\n      success: true,\n      data: user\n    };\n  },\n  updateProfile: async userData => {\n    await delay(800);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return {\n        success: false,\n        error: 'Not authenticated'\n      };\n    }\n    const userId = token.split('_')[2];\n    const userIndex = users.findIndex(u => u._id === userId);\n    if (userIndex === -1) {\n      return {\n        success: false,\n        error: 'User not found'\n      };\n    }\n    users[userIndex] = {\n      ...users[userIndex],\n      ...userData,\n      updatedAt: new Date().toISOString()\n    };\n    return {\n      success: true,\n      data: users[userIndex]\n    };\n  }\n};\n\n// Mock Reports API\nexport const mockReportsAPI = {\n  submitReport: async reportData => {\n    await delay(1200);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return {\n        success: false,\n        error: 'Not authenticated'\n      };\n    }\n    const userId = token.split('_')[2];\n    const user = users.find(u => u._id === userId);\n    if (!user) {\n      return {\n        success: false,\n        error: 'User not found'\n      };\n    }\n    const newReport = {\n      _id: generateId(),\n      reportId: `WR-2024-${String(reports.length + 1).padStart(3, '0')}`,\n      citizenId: user._id,\n      citizenName: user.name,\n      citizenEmail: user.email,\n      location: {\n        type: 'Point',\n        coordinates: [-74.006 + Math.random() * 0.1, 40.7128 + Math.random() * 0.1],\n        address: reportData.get('address') || 'Unknown Address'\n      },\n      images: ['/api/placeholder/400/300'],\n      // Mock image URLs\n      description: reportData.get('description') || '',\n      wasteType: reportData.get('wasteType') || 'household',\n      status: 'submitted',\n      priority: 'medium',\n      estimatedReward: Math.floor(Math.random() * 30) + 15,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    reports.push(newReport);\n\n    // Update user stats\n    const userIndex = users.findIndex(u => u._id === userId);\n    if (userIndex !== -1) {\n      users[userIndex].reportsSubmitted = (users[userIndex].reportsSubmitted || 0) + 1;\n      users[userIndex].totalReports = (users[userIndex].totalReports || 0) + 1;\n    }\n    return {\n      success: true,\n      message: 'Report submitted successfully',\n      data: newReport\n    };\n  },\n  getReports: async params => {\n    await delay(600);\n    let filteredReports = [...reports];\n    if (params !== null && params !== void 0 && params.citizenId) {\n      filteredReports = filteredReports.filter(r => r.citizenId === params.citizenId);\n    }\n    if (params !== null && params !== void 0 && params.assignedTo) {\n      filteredReports = filteredReports.filter(r => r.assignedTo === params.assignedTo);\n    }\n    if (params !== null && params !== void 0 && params.status) {\n      filteredReports = filteredReports.filter(r => r.status === params.status);\n    }\n    return {\n      success: true,\n      data: filteredReports.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    };\n  },\n  getReport: async id => {\n    await delay(400);\n    const report = reports.find(r => r._id === id);\n    if (!report) {\n      return {\n        success: false,\n        error: 'Report not found'\n      };\n    }\n    return {\n      success: true,\n      data: report\n    };\n  },\n  updateReport: async (id, updateData) => {\n    await delay(800);\n    const reportIndex = reports.findIndex(r => r._id === id);\n    if (reportIndex === -1) {\n      return {\n        success: false,\n        error: 'Report not found'\n      };\n    }\n    reports[reportIndex] = {\n      ...reports[reportIndex],\n      ...updateData,\n      updatedAt: new Date().toISOString()\n    };\n    return {\n      success: true,\n      data: reports[reportIndex]\n    };\n  },\n  deleteReport: async id => {\n    await delay(500);\n    const reportIndex = reports.findIndex(r => r._id === id);\n    if (reportIndex === -1) {\n      return {\n        success: false,\n        error: 'Report not found'\n      };\n    }\n    reports.splice(reportIndex, 1);\n    return {\n      success: true,\n      message: 'Report deleted successfully'\n    };\n  }\n};\n\n// Mock Users API\nexport const mockUsersAPI = {\n  getUsers: async params => {\n    await delay(600);\n    let filteredUsers = [...users];\n    if (params !== null && params !== void 0 && params.role) {\n      filteredUsers = filteredUsers.filter(u => u.role === params.role);\n    }\n    if (params !== null && params !== void 0 && params.status) {\n      filteredUsers = filteredUsers.filter(u => u.status === params.status);\n    }\n    return {\n      success: true,\n      data: filteredUsers\n    };\n  },\n  getUser: async id => {\n    await delay(400);\n    const user = users.find(u => u._id === id);\n    if (!user) {\n      return {\n        success: false,\n        error: 'User not found'\n      };\n    }\n    return {\n      success: true,\n      data: user\n    };\n  },\n  updateUser: async (id, updateData) => {\n    await delay(800);\n    const userIndex = users.findIndex(u => u._id === id);\n    if (userIndex === -1) {\n      return {\n        success: false,\n        error: 'User not found'\n      };\n    }\n    users[userIndex] = {\n      ...users[userIndex],\n      ...updateData,\n      updatedAt: new Date().toISOString()\n    };\n    return {\n      success: true,\n      data: users[userIndex]\n    };\n  },\n  deleteUser: async id => {\n    await delay(500);\n    const userIndex = users.findIndex(u => u._id === id);\n    if (userIndex === -1) {\n      return {\n        success: false,\n        error: 'User not found'\n      };\n    }\n    users.splice(userIndex, 1);\n    return {\n      success: true,\n      message: 'User deleted successfully'\n    };\n  }\n};\n\n// Mock Analytics API\nexport const mockAnalyticsAPI = {\n  getDashboardStats: async () => {\n    await delay(700);\n    const stats = {\n      totalReports: reports.length,\n      pendingReports: reports.filter(r => r.status === 'submitted').length,\n      inProgressReports: reports.filter(r => r.status === 'in_progress').length,\n      completedReports: reports.filter(r => r.status === 'completed').length,\n      rejectedReports: reports.filter(r => r.status === 'rejected').length,\n      totalUsers: users.length,\n      activeCollectors: users.filter(u => u.role === 'collector' && u.isAvailable).length,\n      totalRewards: rewards.reduce((sum, r) => sum + r.points, 0),\n      avgResponseTime: 2.5\n    };\n    return {\n      success: true,\n      data: stats\n    };\n  }\n};\n\n// Mock Rewards API\nexport const mockRewardsAPI = {\n  getUserRewards: async userId => {\n    await delay(500);\n    const userRewards = rewards.filter(r => r.userId === userId);\n    return {\n      success: true,\n      data: userRewards\n    };\n  },\n  getAllRewards: async () => {\n    await delay(600);\n    return {\n      success: true,\n      data: rewards\n    };\n  }\n};\n\n// Mock Notifications API\nexport const mockNotificationsAPI = {\n  getUserNotifications: async userId => {\n    await delay(400);\n    const userNotifications = notifications.filter(n => n.userId === userId);\n    return {\n      success: true,\n      data: userNotifications\n    };\n  },\n  markAsRead: async notificationId => {\n    await delay(300);\n    const notificationIndex = notifications.findIndex(n => n._id === notificationId);\n    if (notificationIndex !== -1) {\n      notifications[notificationIndex].read = true;\n    }\n    return {\n      success: true,\n      message: 'Notification marked as read'\n    };\n  }\n};\n\n// Export all mock APIs\nexport const mockAPI = {\n  auth: mockAuthAPI,\n  reports: mockReportsAPI,\n  users: mockUsersAPI,\n  analytics: mockAnalyticsAPI,\n  rewards: mockRewardsAPI,\n  notifications: mockNotificationsAPI\n};","map":{"version":3,"names":["mockUsers","mockReports","mockRewards","mockNotifications","delay","generateId","users","reports","rewards","notifications","mockAuthAPI","login","email","password","user","find","u","success","error","token","_id","Date","now","message","data","register","userData","existingUser","newUser","name","phone","role","points","totalReports","completedReports","reportsSubmitted","status","createdAt","toISOString","updatedAt","push","getProfile","localStorage","getItem","userId","split","updateProfile","userIndex","findIndex","mockReportsAPI","submitReport","reportData","newReport","reportId","String","length","padStart","citizenId","citizenName","citizenEmail","location","type","coordinates","Math","random","address","get","images","description","wasteType","priority","estimatedReward","floor","getReports","params","filteredReports","filter","r","assignedTo","sort","a","b","getTime","getReport","id","report","updateReport","updateData","reportIndex","deleteReport","splice","mockUsersAPI","getUsers","filteredUsers","getUser","updateUser","deleteUser","mockAnalyticsAPI","getDashboardStats","stats","pendingReports","inProgressReports","rejectedReports","totalUsers","activeCollectors","isAvailable","totalRewards","reduce","sum","avgResponseTime","mockRewardsAPI","getUserRewards","userRewards","getAllRewards","mockNotificationsAPI","getUserNotifications","userNotifications","n","markAsRead","notificationId","notificationIndex","read","mockAPI","auth","analytics"],"sources":["E:/Derick/Projects/waste-management/client/src/utils/mockApi.ts"],"sourcesContent":["import { ApiResponse, User, Report, DashboardStats } from '../types';\nimport { \n  mockUsers, \n  mockReports, \n  mockDashboardStats, \n  mockRewards, \n  mockNotifications, \n  delay, \n  generateId \n} from './mockData';\n\n// Mock storage to simulate database\nlet users = [...mockUsers];\nlet reports = [...mockReports];\nlet rewards = [...mockRewards];\nlet notifications = [...mockNotifications];\n\n// Mock Authentication API\nexport const mockAuthAPI = {\n  login: async (email: string, password: string): Promise<ApiResponse<{ token: string; user: User }>> => {\n    await delay(800); // Simulate network delay\n    \n    const user = users.find(u => u.email === email);\n    if (!user || password !== 'password123') {\n      return {\n        success: false,\n        error: 'Invalid credentials'\n      };\n    }\n\n    const token = `mock_token_${user._id}_${Date.now()}`;\n    return {\n      success: true,\n      message: 'Login successful',\n      data: { token, user }\n    };\n  },\n\n  register: async (userData: Partial<User>): Promise<ApiResponse<{ token: string; user: User }>> => {\n    await delay(1000);\n    \n    const existingUser = users.find(u => u.email === userData.email);\n    if (existingUser) {\n      return {\n        success: false,\n        error: 'User already exists with this email'\n      };\n    }\n\n    const newUser: User = {\n      _id: generateId(),\n      name: userData.name || '',\n      email: userData.email || '',\n      phone: userData.phone,\n      role: userData.role || 'citizen',\n      points: 0,\n      totalReports: 0,\n      completedReports: 0,\n      reportsSubmitted: 0,\n      status: 'active',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n\n    users.push(newUser);\n    const token = `mock_token_${newUser._id}_${Date.now()}`;\n    \n    return {\n      success: true,\n      message: 'Registration successful',\n      data: { token, user: newUser }\n    };\n  },\n\n  getProfile: async (): Promise<ApiResponse<User>> => {\n    await delay(500);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return { success: false, error: 'Not authenticated' };\n    }\n\n    const userId = token.split('_')[2];\n    const user = users.find(u => u._id === userId);\n    \n    if (!user) {\n      return { success: false, error: 'User not found' };\n    }\n\n    return { success: true, data: user };\n  },\n\n  updateProfile: async (userData: Partial<User>): Promise<ApiResponse<User>> => {\n    await delay(800);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return { success: false, error: 'Not authenticated' };\n    }\n\n    const userId = token.split('_')[2];\n    const userIndex = users.findIndex(u => u._id === userId);\n    \n    if (userIndex === -1) {\n      return { success: false, error: 'User not found' };\n    }\n\n    users[userIndex] = { ...users[userIndex], ...userData, updatedAt: new Date().toISOString() };\n    return { success: true, data: users[userIndex] };\n  }\n};\n\n// Mock Reports API\nexport const mockReportsAPI = {\n  submitReport: async (reportData: FormData): Promise<ApiResponse<Report>> => {\n    await delay(1200);\n    \n    const token = localStorage.getItem('token');\n    if (!token) {\n      return { success: false, error: 'Not authenticated' };\n    }\n\n    const userId = token.split('_')[2];\n    const user = users.find(u => u._id === userId);\n    \n    if (!user) {\n      return { success: false, error: 'User not found' };\n    }\n\n    const newReport: Report = {\n      _id: generateId(),\n      reportId: `WR-2024-${String(reports.length + 1).padStart(3, '0')}`,\n      citizenId: user._id,\n      citizenName: user.name,\n      citizenEmail: user.email,\n      location: {\n        type: 'Point',\n        coordinates: [-74.006 + Math.random() * 0.1, 40.7128 + Math.random() * 0.1],\n        address: reportData.get('address') as string || 'Unknown Address'\n      },\n      images: ['/api/placeholder/400/300'], // Mock image URLs\n      description: reportData.get('description') as string || '',\n      wasteType: reportData.get('wasteType') as string || 'household',\n      status: 'submitted',\n      priority: 'medium',\n      estimatedReward: Math.floor(Math.random() * 30) + 15,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n\n    reports.push(newReport);\n    \n    // Update user stats\n    const userIndex = users.findIndex(u => u._id === userId);\n    if (userIndex !== -1) {\n      users[userIndex].reportsSubmitted = (users[userIndex].reportsSubmitted || 0) + 1;\n      users[userIndex].totalReports = (users[userIndex].totalReports || 0) + 1;\n    }\n\n    return {\n      success: true,\n      message: 'Report submitted successfully',\n      data: newReport\n    };\n  },\n\n  getReports: async (params?: any): Promise<ApiResponse<Report[]>> => {\n    await delay(600);\n    \n    let filteredReports = [...reports];\n    \n    if (params?.citizenId) {\n      filteredReports = filteredReports.filter(r => r.citizenId === params.citizenId);\n    }\n    \n    if (params?.assignedTo) {\n      filteredReports = filteredReports.filter(r => r.assignedTo === params.assignedTo);\n    }\n    \n    if (params?.status) {\n      filteredReports = filteredReports.filter(r => r.status === params.status);\n    }\n\n    return {\n      success: true,\n      data: filteredReports.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    };\n  },\n\n  getReport: async (id: string): Promise<ApiResponse<Report>> => {\n    await delay(400);\n    \n    const report = reports.find(r => r._id === id);\n    if (!report) {\n      return { success: false, error: 'Report not found' };\n    }\n\n    return { success: true, data: report };\n  },\n\n  updateReport: async (id: string, updateData: Partial<Report>): Promise<ApiResponse<Report>> => {\n    await delay(800);\n    \n    const reportIndex = reports.findIndex(r => r._id === id);\n    if (reportIndex === -1) {\n      return { success: false, error: 'Report not found' };\n    }\n\n    reports[reportIndex] = { \n      ...reports[reportIndex], \n      ...updateData, \n      updatedAt: new Date().toISOString() \n    };\n\n    return { success: true, data: reports[reportIndex] };\n  },\n\n  deleteReport: async (id: string): Promise<ApiResponse<void>> => {\n    await delay(500);\n    \n    const reportIndex = reports.findIndex(r => r._id === id);\n    if (reportIndex === -1) {\n      return { success: false, error: 'Report not found' };\n    }\n\n    reports.splice(reportIndex, 1);\n    return { success: true, message: 'Report deleted successfully' };\n  }\n};\n\n// Mock Users API\nexport const mockUsersAPI = {\n  getUsers: async (params?: any): Promise<ApiResponse<User[]>> => {\n    await delay(600);\n    \n    let filteredUsers = [...users];\n    \n    if (params?.role) {\n      filteredUsers = filteredUsers.filter(u => u.role === params.role);\n    }\n    \n    if (params?.status) {\n      filteredUsers = filteredUsers.filter(u => u.status === params.status);\n    }\n\n    return { success: true, data: filteredUsers };\n  },\n\n  getUser: async (id: string): Promise<ApiResponse<User>> => {\n    await delay(400);\n    \n    const user = users.find(u => u._id === id);\n    if (!user) {\n      return { success: false, error: 'User not found' };\n    }\n\n    return { success: true, data: user };\n  },\n\n  updateUser: async (id: string, updateData: Partial<User>): Promise<ApiResponse<User>> => {\n    await delay(800);\n    \n    const userIndex = users.findIndex(u => u._id === id);\n    if (userIndex === -1) {\n      return { success: false, error: 'User not found' };\n    }\n\n    users[userIndex] = { \n      ...users[userIndex], \n      ...updateData, \n      updatedAt: new Date().toISOString() \n    };\n\n    return { success: true, data: users[userIndex] };\n  },\n\n  deleteUser: async (id: string): Promise<ApiResponse<void>> => {\n    await delay(500);\n    \n    const userIndex = users.findIndex(u => u._id === id);\n    if (userIndex === -1) {\n      return { success: false, error: 'User not found' };\n    }\n\n    users.splice(userIndex, 1);\n    return { success: true, message: 'User deleted successfully' };\n  }\n};\n\n// Mock Analytics API\nexport const mockAnalyticsAPI = {\n  getDashboardStats: async (): Promise<ApiResponse<DashboardStats>> => {\n    await delay(700);\n    \n    const stats: DashboardStats = {\n      totalReports: reports.length,\n      pendingReports: reports.filter(r => r.status === 'submitted').length,\n      inProgressReports: reports.filter(r => r.status === 'in_progress').length,\n      completedReports: reports.filter(r => r.status === 'completed').length,\n      rejectedReports: reports.filter(r => r.status === 'rejected').length,\n      totalUsers: users.length,\n      activeCollectors: users.filter(u => u.role === 'collector' && u.isAvailable).length,\n      totalRewards: rewards.reduce((sum, r) => sum + r.points, 0),\n      avgResponseTime: 2.5\n    };\n\n    return { success: true, data: stats };\n  }\n};\n\n// Mock Rewards API\nexport const mockRewardsAPI = {\n  getUserRewards: async (userId: string): Promise<ApiResponse<typeof rewards>> => {\n    await delay(500);\n    \n    const userRewards = rewards.filter(r => r.userId === userId);\n    return { success: true, data: userRewards };\n  },\n\n  getAllRewards: async (): Promise<ApiResponse<typeof rewards>> => {\n    await delay(600);\n    return { success: true, data: rewards };\n  }\n};\n\n// Mock Notifications API\nexport const mockNotificationsAPI = {\n  getUserNotifications: async (userId: string): Promise<ApiResponse<typeof notifications>> => {\n    await delay(400);\n    \n    const userNotifications = notifications.filter(n => n.userId === userId);\n    return { success: true, data: userNotifications };\n  },\n\n  markAsRead: async (notificationId: string): Promise<ApiResponse<void>> => {\n    await delay(300);\n    \n    const notificationIndex = notifications.findIndex(n => n._id === notificationId);\n    if (notificationIndex !== -1) {\n      notifications[notificationIndex].read = true;\n    }\n    \n    return { success: true, message: 'Notification marked as read' };\n  }\n};\n\n// Export all mock APIs\nexport const mockAPI = {\n  auth: mockAuthAPI,\n  reports: mockReportsAPI,\n  users: mockUsersAPI,\n  analytics: mockAnalyticsAPI,\n  rewards: mockRewardsAPI,\n  notifications: mockNotificationsAPI\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}